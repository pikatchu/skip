/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*****************************************************************************/
/* Entry point used for typechecking. Invoke it as
 *
 *     skip_check_reactive [ROOT_DIR | FILE]
 *
 * It will search upward from the given root path (or the current directory) for a
 * .skipconfig file. See skipConfig.ml for more.
 */
/*****************************************************************************/

untracked fun compileLoop(target: String): void {
  command = "";
  errors = Vector[];
  files = SkipProject.getFilesToAnalyze(target).flatMap(x -> Success(x)) match {
  | Success(x) -> x
  | Failure(errorl) ->
    debug(errorl);
    invariant_violation("Oops")
  };
  loop {
    print_string("SkipCheck running");
    !errors = SkipMain.compileWithErrors(List::createFromItems(files))
      .maybeFailure()
      .default(Vector[])
      .take(100);
    if (errors.isEmpty()) {
      print_string(command);
      if (command == "build") {
        print_string("BUILDING!");
        compile(files.collect(Array));
        print_string("DONE!");
      } else {
        print_string("No errors!");
        FileSystem.writeTextFile("/tmp/errors.txt", "No errors!")
      }
    } else {
      errorStr = errors.join("\n");
      print_raw(errorStr);
      FileSystem.writeTextFile("/tmp/errors.txt", errorStr)
    };
    print_string("Ready");
    !command = read_line();
    print_string("Command received: " + command);
  }
}

untracked fun main(): void {
  compileLoop(SkipAnalyze.pathOfArguments());
}
